# -*- coding: utf-8 -*-
"""carona.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ntn16VEjOhfFA-OBjFjslLQC9oyl2-eN
"""

import sqlite3
import hashlib

def insere_veiculo(placa, modelo, cor):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()
    cursor.execute("INSERT INTO veiculo (placa, modelo, cor) VALUES (?, ?, ?)", (placa, modelo, cor))
    conexao.commit()
    conexao.close()

def insere_usuario(cpf, email, data_nascimento, telefone, veiculo, senha):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()
    senha_hash = hashlib.sha256(senha.encode()).hexdigest()

    cursor.execute("INSERT INTO usuarios (cpf, email, data_nascimento, telefone, veiculo, senha) VALUES (?, ?, ?, ?, ?, ?)",
               (cpf, email, data_nascimento, telefone, veiculo, senha_hash))

    conexao.commit()
    conexao.close()

def insere_carona(cpf_motorista, quantidade, veiculo, ponto_encontro, destino, data_hora):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    cursor.execute('''
        INSERT INTO carona (cpf_motorista, quantidade, veiculo, ponto_encontro, destino, data_hora)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (cpf_motorista, quantidade, veiculo, ponto_encontro, destino, data_hora))

    conexao.commit()
    conexao.close()

def insere_historico(numero_carona, cpf_motorista, cpf_usuario):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    cursor.execute('''
      INSERT INTO historico (numero_carona, cpf_motorista, cpf_usuario)
      VALUES (?, ?, ?)
    ''', (numero_carona, cpf_motorista, cpf_usuario))

    conexao.commit()
    conexao.close()

def atualizar_historico(numero_carona, cpf_usuario, cpf_motorista, avaliacao_motorista, avaliacao_usuario):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    cursor.execute('''
        UPDATE historico
        SET avaliacao_motorista = ?, avaliacao_usuario = ?
        WHERE numero_carona = ? AND cpf_usuario = ? AND cpf_motorista = ?
    ''', (avaliacao_motorista, avaliacao_usuario, numero_carona, cpf_usuario, cpf_motorista))

    conexao.commit()
    conexao.close()

def atualizar_usuario(cpf, email, data_nascimento, telefone, veiculo):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    cursor.execute('''
        UPDATE historico
        SET email = ?, telefone = ?, veiculo = ?
        WHERE cpf = ?
    ''', (email, telefone, veiculo, cpf))

    conexao.commit()
    conexao.close()

def criar_bd():
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    #'veiculo'
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS veiculo (
            placa TEXT PRIMARY KEY,
            modelo TEXT,
            cor TEXT
        )
    ''')

    # 'usuarios'
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            cpf TEXT UNIQUE NOT NULL,
            email TEXT UNIQUE NOT NULL,
            data_nascimento TEXT NOT NULL,
            telefone TEXT,
            veiculo TEXT,
            avaliacao_media REAL DEFAULT 0,
            senha TEXT NOT NULL,
            FOREIGN KEY (veiculo) REFERENCES veiculo (placa)
        )
    ''')

    # 'carona'
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS carona (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            cpf_motorista TEXT NOT NULL,
            quantidade INTEGER NOT NULL,
            veiculo TEXT NOT NULL,
            ponto_encontro TEXT NOT NULL,
            destino TEXT NOT NULL,
            data_hora TEXT NOT NULL,
            FOREIGN KEY (cpf_motorista) REFERENCES usuarios (cpf),
            FOREIGN KEY (veiculo) REFERENCES veiculo (placa)
        )
    ''')

    # 'historico'
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS historico (
            numero_carona INTEGER NOT NULL,
            cpf_motorista TEXT NOT NULL,
            cpf_usuario TEXT NOT NULL,
            avaliacao_motorista INTEGER DEFAULT NULL,
            avaliacao_usuario INTEGER DEFAULT NULL,
            PRIMARY KEY (numero_carona, cpf_usuario),
            FOREIGN KEY (numero_carona) REFERENCES carona (id),
            FOREIGN KEY (cpf_motorista) REFERENCES usuarios (cpf),
            FOREIGN KEY (cpf_usuario) REFERENCES usuarios (cpf)
        )
    ''')

def consultar_usuarios():
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    cursor.execute("SELECT * FROM usuarios")
    usuarios = cursor.fetchall()

    for usuario in usuarios:
        print(usuario)

    conexao.close()

def consultar_veiculo():
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    cursor.execute("SELECT * FROM veiculo")
    veiculos = cursor.fetchall()

    for veiculo in veiculos:
        print(veiculo)
    conexao.close()

def consultar_carona():
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()
    cursor.execute("SELECT * FROM carona")
    caronas = cursor.fetchall()
    for carona in caronas:
        print(carona)
    conexao.close()


def consultar_historico():
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()
    cursor.execute("SELECT * FROM historico")
    historico = cursor.fetchall()

    for registro in historico:
        print(registro)
    conexao.close()

def apaga_usuario(cpf):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    cursor.execute("DELETE FROM usuarios WHERE cpf = ?", (cpf,))

    cursor.execute("DELETE FROM historico WHERE cpf_usuario = ? OR cpf_motorista = ?", (cpf, cpf))

    conexao.commit()
    conexao.close()

#caso o motorista queira tirar o carro
def apaga_veiculo(placa):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    cursor.execute("DELETE FROM veiculo WHERE placa = ?", (placa,))

    cursor.execute("UPDATE usuarios SET veiculo = NULL WHERE veiculo = ?", (placa,))

    cursor.execute("DELETE FROM carona WHERE veiculo = ?", (placa,))

    conexao.commit()
    conexao.close()

#caso um usuÃ¡rio especifico desista
def apaga_historico(numero_carona, cpf_usuario):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    cursor.execute("DELETE FROM historico WHERE numero_carona = ? AND cpf_usuario = ?", (numero_carona, cpf_usuario))

    conexao.commit()
    conexao.close()

#caso o motorista desista
def apaga_carona(numero_carona):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    cursor.execute("DELETE FROM carona WHERE id = ?", (numero_carona,))

    cursor.execute("DELETE FROM historico WHERE numero_carona = ?", (numero_carona,))

    conexao.commit()
    conexao.close()

#caso alguem aceite a carona
def diminui_quantidade_carona(cpf_motorista):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    # Reduzir a quantidade de caronas para o motorista
    cursor.execute('''
        UPDATE carona
        SET quantidade = quantidade - ?
        WHERE cpf_motorista = ? AND quantidade >= ?
    ''', (1, cpf_motorista, 0))

    conexao.commit()
    conexao.close()

#caso alguem cancele a carona
def aumenta_quantidade_carona(cpf_motorista):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    # Aumentar a quantidade de caronas para o motorista
    cursor.execute('''
        UPDATE carona
        SET quantidade = quantidade + ?
        WHERE cpf_motorista = ?
    ''', (1, cpf_motorista))

    conexao.commit()
    conexao.close()

def atualizar_media_avaliacoes(cpf_usuario):
      conexao = sqlite3.connect('sistema_caronas.db')
      cursor = conexao.cursor()

      cursor.execute('''
          SELECT SUM(avaliacao_motorista), COUNT(avaliacao_motorista)
          FROM historico
          WHERE cpf_motorista = ? AND avaliacao_motorista IS NOT NULL
      ''', (cpf_usuario,))
      resultado_motorista = cursor.fetchone()
      soma_motorista = resultado_motorista[0] or 0
      count_motorista = resultado_motorista[1] or 0

      cursor.execute('''
          SELECT SUM(avaliacao_usuario), COUNT(avaliacao_usuario)
          FROM historico
          WHERE cpf_usuario = ? AND avaliacao_usuario IS NOT NULL
      ''', (cpf_usuario,))
      resultado_usuario = cursor.fetchone()
      soma_usuario = resultado_usuario[0] or 0
      count_usuario = resultado_usuario[1] or 0

      soma_total = soma_motorista + soma_usuario
      total_carona = count_motorista + count_usuario

      media_geral = soma_total / total_carona if total_carona > 0 else 0

      cursor.execute('''
          UPDATE usuarios
          SET avaliacao_media = ?
          WHERE cpf = ?
      ''', (media_geral, cpf_usuario))

      conexao.commit()
      conexao.close()

def obter_numero_carona(cpf_motorista, data_hora):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    # Fazer a consulta para obter o ID da carona usando cpf_motorista e data_hora
    cursor.execute('''
        SELECT id FROM carona
        WHERE cpf_motorista = ? AND data_hora = ?
    ''', (cpf_motorista, data_hora))

    resultado = cursor.fetchone()

    conexao.close()

    if resultado:
        return resultado[0]  # O ID da carona
    else:
        return None

criar_bd()

#o cadastro insere no banco de dados
insere_usuario('123.456.789-90','carvalho@gmail.com', '25/05/2003', '(11) 99999-9999','ABC9854', 'lobinho123')
insere_usuario('312.546.997-90','yamamoto@gmail.com', '06/06/2001', '(11) 99999-9999','ABC9555', 'lobinho123')
insere_usuario('123.433.383-90','zagnoli@gmail.com', '25/05/2005', '(11) 99999-9999','ABC9333', 'lobinho123')
insere_usuario('111.121.117-90','manuel@gmail.com', '03/06/2007', '(11) 99999-9999', None,'lobinho123')


insere_veiculo('ABC9854','ferrari', 'preto')
insere_veiculo('ABC9555','celta', 'preto')
insere_veiculo('ABC9333','celta', 'azul')

insere_carona('123.456.789-90',3,'ABC9854','minha casa','UFMG', '2024-10-05 14:30:00')
insere_carona('312.546.997-90',2,'ABC9555','casa deb','UFMG', '2024-10-05 15:28:00')

insere_historico(obter_numero_carona('123.456.789-90', '2024-10-05 14:30:00'),'123.456.789-90','123.433.383-90')
insere_historico(obter_numero_carona('312.546.997-90', '2024-10-05 15:28:00'),'312.546.997-90','111.121.117-90')
insere_historico(obter_numero_carona('123.456.789-90', '2024-10-05 14:30:00'),'123.456.789-90','111.121.117-90')
atualizar_historico(obter_numero_carona('123.456.789-90', '2024-10-05 14:30:00'),'123.433.383-90','123.456.789-90', 5 , 4)
atualizar_historico(obter_numero_carona('123.456.789-90', '2024-10-05 14:30:00'),'111.121.117-90','123.456.789-90', 3 , 1)
atualizar_media_avaliacoes('123.456.789-90')
atualizar_media_avaliacoes('123.433.383-90')
atualizar_media_avaliacoes('111.121.117-90')
consultar_usuarios()
consultar_veiculo()
consultar_carona()
consultar_historico()

def cadastrar_usuario(cpf, email, data_nascimento, telefone, senha, veiculo=None):
    conexao = sqlite3.connect('sistema_caronas.db')
    cursor = conexao.cursor()

    # Verificar se o CPF ou email jÃ¡ estÃ£o cadastrados
    cursor.execute("SELECT cpf FROM usuarios WHERE cpf = ? OR email = ?", (cpf, email))
    usuario_existente = cursor.fetchone()

    if usuario_existente:
        print("Erro: CPF ou email jÃ¡ cadastrado.")
        return False

    try:
        # Inserir os dados do novo usuÃ¡rio no banco
        insere_usuario(cpf, email, data_nascimento, telefone, veiculo, senha)
        print("UsuÃ¡rio cadastrado com sucesso!")
        return True
    except Exception as e:
        print(f"Erro ao cadastrar usuÃ¡rio: {e}")
        return False
    finally:
        conexao.close()